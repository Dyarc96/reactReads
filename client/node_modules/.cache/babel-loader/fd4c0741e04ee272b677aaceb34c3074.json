{"ast":null,"code":"import _classCallCheck from \"/Users/macbook/Desktop/html,css,js/udemyReact/reactreads/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/macbook/Desktop/html,css,js/udemyReact/reactreads/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/macbook/Desktop/html,css,js/udemyReact/reactreads/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/macbook/Desktop/html,css,js/udemyReact/reactreads/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/macbook/Desktop/html,css,js/udemyReact/reactreads/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/macbook/Desktop/html,css,js/udemyReact/reactreads/client/src/components/books/BooksToRead.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchToReadBooks } from '../../actions/';\n\nvar BooksReading =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BooksReading, _React$Component);\n\n  function BooksReading() {\n    _classCallCheck(this, BooksReading);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BooksReading).apply(this, arguments));\n  }\n\n  _createClass(BooksReading, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchToReadBooks();\n    }\n  }, {\n    key: \"renderList\",\n    value: function renderList() {\n      var _this = this;\n\n      return this.props.toReadBooks.map(function (book) {\n        if (!book.userId) {\n          return;\n        } else if (book.userId === _this.props.currentUserId) {\n          return React.createElement(\"div\", {\n            className: \"item\",\n            key: book.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 17\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"large middle aligned icon book\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 18\n            },\n            __self: this\n          }), React.createElement(\"div\", {\n            className: \"content\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 19\n            },\n            __self: this\n          }, book.title, React.createElement(\"div\", {\n            className: \"description\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 21\n            },\n            __self: this\n          }, book.author)));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 28\n            },\n            __self: this\n          }, \"Please log in to see data\");\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Books to read\"), React.createElement(\"div\", {\n        className: \"ui celled list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, this.renderList()));\n    }\n  }]);\n\n  return BooksReading;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    toReadBooks: Object.values(state.toReadBooks),\n    currentUserId: state.auth.userId\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchToReadBooks: fetchToReadBooks\n})(BooksReading);","map":{"version":3,"sources":["/Users/macbook/Desktop/html,css,js/udemyReact/reactreads/client/src/components/books/BooksToRead.js"],"names":["React","connect","fetchToReadBooks","BooksReading","props","toReadBooks","map","book","userId","currentUserId","id","title","author","renderList","Component","mapStateToProps","state","Object","values","auth"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,gBAAjC;;IAGMC,Y;;;;;;;;;;;;;wCACkB;AAChB,WAAKC,KAAL,CAAWF,gBAAX;AACH;;;iCAEY;AAAA;;AACT,aAAO,KAAKE,KAAL,CAAWC,WAAX,CAAuBC,GAAvB,CAA2B,UAAAC,IAAI,EAAI;AACtC,YAAG,CAACA,IAAI,CAACC,MAAT,EAAiB;AACb;AACH,SAFD,MAEO,IAAID,IAAI,CAACC,MAAL,KAAgB,KAAI,CAACJ,KAAL,CAAWK,aAA/B,EAA8C;AACrD,iBACI;AAAK,YAAA,SAAS,EAAC,MAAf;AAAsB,YAAA,GAAG,EAAEF,IAAI,CAACG,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACA;AAAG,YAAA,SAAS,EAAC,gCAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,EAEA;AAAK,YAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACKH,IAAI,CAACI,KADV,EAEI;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACCJ,IAAI,CAACK,MADN,CAFJ,CAFA,CADJ;AAWH,SAZU,MAYJ;AACH,iBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAP;AACH;AACJ,OAlBU,CAAP;AAmBP;;;6BACY;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADA,EAEA;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiC,KAAKC,UAAL,EAAjC,CAFA,CADJ;AAMH;;;;EAjCsBb,KAAK,CAACc,S;;AAoCjC,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,SAAO;AACHX,IAAAA,WAAW,EAAEY,MAAM,CAACC,MAAP,CAAcF,KAAK,CAACX,WAApB,CADV;AAEHI,IAAAA,aAAa,EAAEO,KAAK,CAACG,IAAN,CAAWX;AAFvB,GAAP;AAIH,CALD;;AAOA,eAAeP,OAAO,CAACc,eAAD,EAAkB;AAAEb,EAAAA,gBAAgB,EAAhBA;AAAF,CAAlB,CAAP,CAA+CC,YAA/C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchToReadBooks } from '../../actions/';\n\n\nclass BooksReading extends React.Component {\n    componentDidMount() {\n        this.props.fetchToReadBooks();\n    }\n\n    renderList() {\n        return this.props.toReadBooks.map(book => {\n            if(!book.userId) {\n                return\n            } else if (book.userId === this.props.currentUserId) {\n            return (\n                <div className=\"item\" key={book.id}>\n                <i className=\"large middle aligned icon book\" />\n                <div className=\"content\">\n                    {book.title}\n                    <div className=\"description\">\n                    {book.author}\n                    </div>\n                </div>\n                </div>\n            );\n        } else {\n            return <div>Please log in to see data</div>\n        }\n    })\n}\n    render() {\n        return (\n            <div>\n            <h2>Books to read</h2>\n            <div className=\"ui celled list\">{this.renderList()}</div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return { \n        toReadBooks: Object.values(state.toReadBooks),\n        currentUserId: state.auth.userId    \n    };\n}\n\nexport default connect(mapStateToProps, { fetchToReadBooks })(BooksReading);"]},"metadata":{},"sourceType":"module"}